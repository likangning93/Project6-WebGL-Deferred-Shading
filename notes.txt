HOW THINGS WORK
-so deferred shading is all about reducing the number of fragment shadings that need to happen
-so the deferred shader rasterizes, and then performs lighting computations only for what's visible
-in webgl apparently this requires writing out buffers of what's visible
-so these are the "multiple render passes"
-btw, shader programs can have inputs and outputs bound on init

BLOOM
-something's... not so right
-but the idea of this should work
-just need a better filter system
-should we make this a separate post processing shader? can we do this without addtl buffers?
	-yes. probably. hopefully.
	-which would make profiling later easier.
-TODO:
	-add camera position uniform to blinn-phong [done. turns out this was in Kai's updates]
	-find a better filter [done]
	-make this a separate post-processing shader

SCISSOR TEST [done]
-ok ok ok. so it's restricting the shading to a screen space "box" that gets a lighting computation
-shouldn't be too bad
-we'll need to tweak ambient, btw. scene is too dark atm. [done]
-TODO:
	-enable and use Kai's primitive scissor test [done]
	-add scissor test debug mode [done]

PACKING AND OPTIMIZATION -> all about trying to do this stuff while keeping it toggleable
-try 2-component normals
	-use length of x and y to get magnitude of z
	-these are normalized, so no component will be greater than 1 -> use that to pack sign of z
	-how to do this while making it toggleable? -> probably needs a new shader

-apply normal map and pass it along -> easy, probably. but will interfere with debug -> needs a new shader

-reconstruct world space pos w/cam matrix, x/y/depth -> hmmm. -> needs a new shader
	-need to invert cam matrix? -> look up how to do this.
	-we probably already need to add a uniform for cam position, b/c blinn phong is broken without it

2 COMPONENT NORMALS and WORLD SPACE RECONSTRUCT
-so we don't want to change from buffers of vec4s
-which means if we're packing, we want to pack both 2-comp normals and world space pos into one buffer

-so we'll need a new copy.frag.glsl and a new copy.vert.glsl
	-new copy.vert.glsl will need to push screen space position over
	-new copy.frag.glsl will only do 2 buffers: texture2D and compacted position/normal
	-new copy.frag.glsl will also need to apply surface normal internally

-we'll need to add a new blinnphong-pointlight.frag.glsl and ambient.frag.glsl as well
	-just need to add position/normal reconstruction

-which means we'll need to add setup for all of these in deferredSetup.js
-might as well add a new debug.frag.glsl as well to help debug reconstruction
-so we're basically duplicating a huge chunk of the project. ok.

SCREEN SPACE MOTION BLUR and/or TOON SHADING
-screen space motion blur has a GPU gems article, so this might be more straightforward
	-would also be post processing
-but toon shading: -> TOON SHADING IS COOL
	-need to sample at each frag for depth. if depth change is beyond some threshold, then need to add a line
	-ramp shading: like cutting up the gradient of blinn-phong for specular. we can probably generate this.
	-so this has to be an alternate shader to blinn-phong


TILING
-basically trying to reduce number of light calculations by tiling
-think about how to do this
-seems like it could extend from scissor test?

TODO before seeing Kai:
-make bloom toggleable [done]
-make scissor test toggleable [done...? there was a mystery crash]
-add a toon shader. make it toggleable. should theoretically be very similar to blinnphong in the js

Seeing Kai:
-so I'm trying to have a separate pipeline that I can toggle
-this pipeline has copy stuff that produces fewer gbuffers
-my understanding is that each framebuffer can have its own gbuffers
-but the gbuffers here seem to be wrong. what's up?
